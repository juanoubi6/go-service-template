// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	googlemaps "go-service-template/domain/googlemaps"
	domain "go-service-template/monitor"

	mock "github.com/stretchr/testify/mock"
)

// GoogleMapsAPI is an autogenerated mock type for the GoogleMapsAPI type
type GoogleMapsAPI struct {
	mock.Mock
}

// ValidateAddress provides a mock function with given fields: ctx, request
func (_m *GoogleMapsAPI) ValidateAddress(ctx domain.ApplicationContext, request googlemaps.AddressValidationRequest) (*googlemaps.AddressValidateMatch, error) {
	ret := _m.Called(ctx, request)

	var r0 *googlemaps.AddressValidateMatch
	if rf, ok := ret.Get(0).(func(domain.ApplicationContext, googlemaps.AddressValidationRequest) *googlemaps.AddressValidateMatch); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*googlemaps.AddressValidateMatch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.ApplicationContext, googlemaps.AddressValidationRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGoogleMapsAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewGoogleMapsAPI creates a new instance of GoogleMapsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGoogleMapsAPI(t mockConstructorTestingTNewGoogleMapsAPI) *GoogleMapsAPI {
	mock := &GoogleMapsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
