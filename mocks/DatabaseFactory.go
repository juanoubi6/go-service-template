// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	repositories "go-service-template/repositories"
)

// DatabaseFactory is an autogenerated mock type for the DatabaseFactory type
type DatabaseFactory struct {
	mock.Mock
}

// GetLocationsDB provides a mock function with given fields:
func (_m *DatabaseFactory) GetLocationsDB() (repositories.LocationsDB, error) {
	ret := _m.Called()

	var r0 repositories.LocationsDB
	if rf, ok := ret.Get(0).(func() repositories.LocationsDB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.LocationsDB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDatabaseFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatabaseFactory creates a new instance of DatabaseFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabaseFactory(t mockConstructorTestingTNewDatabaseFactory) *DatabaseFactory {
	mock := &DatabaseFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
