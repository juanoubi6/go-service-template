// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	domain "go-service-template/domain"
	http "go-service-template/http"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// CustomHTTPClient is an autogenerated mock type for the CustomHTTPClient type
type CustomHTTPClient struct {
	mock.Mock
}

// Do provides a mock function with given fields: ctx, requestValues
func (_m *CustomHTTPClient) Do(ctx domain.ApplicationContext, requestValues http.RequestValues) (http.CustomHTTPResponse, error) {
	ret := _m.Called(ctx, requestValues)

	var r0 http.CustomHTTPResponse
	if rf, ok := ret.Get(0).(func(domain.ApplicationContext, http.RequestValues) http.CustomHTTPResponse); ok {
		r0 = rf(ctx, requestValues)
	} else {
		r0 = ret.Get(0).(http.CustomHTTPResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.ApplicationContext, http.RequestValues) error); ok {
		r1 = rf(ctx, requestValues)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoWithRetry provides a mock function with given fields: ctx, requestValues, timeout, retryAmount, backoff, specialStatusCodesToRetry
func (_m *CustomHTTPClient) DoWithRetry(ctx domain.ApplicationContext, requestValues http.RequestValues, timeout time.Duration, retryAmount int, backoff time.Duration, specialStatusCodesToRetry []int) (http.CustomHTTPResponse, error) {
	ret := _m.Called(ctx, requestValues, timeout, retryAmount, backoff, specialStatusCodesToRetry)

	var r0 http.CustomHTTPResponse
	if rf, ok := ret.Get(0).(func(domain.ApplicationContext, http.RequestValues, time.Duration, int, time.Duration, []int) http.CustomHTTPResponse); ok {
		r0 = rf(ctx, requestValues, timeout, retryAmount, backoff, specialStatusCodesToRetry)
	} else {
		r0 = ret.Get(0).(http.CustomHTTPResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.ApplicationContext, http.RequestValues, time.Duration, int, time.Duration, []int) error); ok {
		r1 = rf(ctx, requestValues, timeout, retryAmount, backoff, specialStatusCodesToRetry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCustomHTTPClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustomHTTPClient creates a new instance of CustomHTTPClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomHTTPClient(t mockConstructorTestingTNewCustomHTTPClient) *CustomHTTPClient {
	mock := &CustomHTTPClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
